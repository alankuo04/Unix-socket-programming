本次作業實作多人聊天室部分是使用 multiple process 方式。

Server 端：
    1. 透過使用 fork() 函數來建立新的 process 處理新的 client 要和 server 端連線並溝通
    2. 因為 process 之間沒有共用的變數，所以在 server 端建立一個資料夾 user 用以儲存所有連線使用者的資料以及上下線的資訊
    3. 每個 process 透過檢查屬於自己名字的資料夾底下的檔案，來確認是否有人傳送訊息給自己
    4. 上下線通知也可以透過傳送訊息給所有人的方式來達到
    5. 離線訊息也是透過檢查此使用者是否在線上，來通知現在傳送的這則訊息會在該使用者回來後才會被讀取
    6. 所有的訊息皆會附上傳送的 timestamp

Client 端：
    1. 先顯示簡單的使用者介面來告訴使用者可以輸入的指令有哪些
    2. 接著再判斷使用者輸入的指令為 login, chat 還是 logout
    3. 使用者必須先建立連線，輸入 server 端 IP 以及 Port 50005 再加上使用者的名稱
    4. 在 chat 可以做到 unicast 或 multicast，透過 tokenizer 來切分輸入有多少個使用者以及要傳送的訊息
    5. 若在以建立連線後輸入 logout，則會終止兩端之間的連線
    6. 在傳送完指令後，會接收到 server 端所送的資訊，直到收到終止資訊為止

user 資料夾架構：

user
 | --- user1
 | --- user2
 | --- user3
 | --- online 
         | --- user1
         | --- user2

user1, user2, user3 為曾經登錄過的使用者
online 資料夾中的 user1, user2 代表現在這兩個使用者正在線上
