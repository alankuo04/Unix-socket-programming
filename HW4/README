本次作業要使用 Java 寫出一個井字遊戲，並且要有較好的介面以及等待房間等功能

Server 端：
    1. 使用 Thread 來處理多個 client 想要進行連線的問題。
    2. 多個 thread 都是共用一個 TicTacToeGame 的變數，以此來達到控制同時只能有兩人在房間中對戰。
    3. 透過 TicTacToeGame 中的 synchronized 的函數，來讓同時只能有一個人使用這一個函數以免發生衝突。
    4. 接收 client 端發送來的資料後，回傳當前的 "位置/訊息/(使用者名單/遊戲訊息)"。

Client 端：
    1. 為了達到實時更新資訊，在 Client 端用了兩個 Thread，一個是用來和 Server 端收發訊息，另一個為控制 Client 端的 GUI 變化。
        + 收發訊息：每間隔 1 秒，便發送一則訊息到 Server 端，隨後收取 Server 端回傳之訊息。
        + GUI 控制：每間隔 1 秒，透過從 Server 端回傳之訊息和 GUI 按鈕觸發的事件來更新 GUI 的變化。
    2. 兩個 Thread 之間的溝通是透過 TicTacToeClient 來共享獲得從 Server 端傳回的訊息以及設定當前的狀態以決定要對 Server 端傳送甚麼訊息。
    3. 為了有等待房間的效果，在 Client 端的 GUI 分為兩個頁面：
        + Lobby：等待加入的房間，可以用來登入、登出、加入遊戲房間，其中也會顯示相關的訊息，如當前有誰加入房間、系統自動推薦給你的對手以及所有玩家的資訊等。
        + Room：遊戲用房間，在加入房間後，和對手進行井字遊戲的對戰。
        + 遊戲房間中棋盤上有著 9 個按鈕可以進行放置，但只有輪到你的回何時才能進行。此外，若是你放置的位置錯誤，也會提醒你不能放在那個位置。
    4. 若是遊戲房間以滿，再按下加入房間紐會等待直到有空的房間出現才自動加入。
    5. 系統推薦的對手為當前勝率最低的對手，在看到對方加入房間時，可以盡快加入以免被搶先。
    6. 所有玩家資訊包含：
        + 使用者名稱
        + 勝場數
        + 敗場數
        + 上線/下線
        + 因為是透過不斷更新，因此會顯示即時的勝敗以及上下線資訊。
    7. 登入的使用者名稱若是從未使用過，則當作加入一名新玩家。若是曾經使用過且已經離線，則當作玩家重新連線。

在執行程式時，必須填入 Server 端的 IP 以用於連線，如：
    java Client localhost 或 java Client x.x.x.x
